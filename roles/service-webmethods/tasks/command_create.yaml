---

### Needs:
### - service_name
### - service_exec_filepath
### - service_user
### - service_group
### - service_type

  - name: Check for wM daemon script
    stat:
      path: "{{ webmethods_install_dir }}/common/bin/daemon.sh"
    register: stat_wmdDaemonFile

  - name: fail if daemon script is not found
    fail:
      msg: "Create-Daemon script does not exist...investigate why it does not exist, or use createcustomservice"
    when: stat_wmdDaemonFile.stat.exists == false

  - name: fail if service_name not specified
    fail:
      msg: "service_name not specified...cannot create."
    when: service_name is not defined or service_name == ""

  - name: fail if service_exec_filepath not specified
    fail:
      msg: "service_exec_filepath not specified...cannot create."
    when: service_exec_filepath is not defined or service_exec_filepath == ""

  - name: fail if service_user not specified
    fail:
      msg: "service_user not specified...cannot create."
    when: service_user is not defined or service_user == ""

  - name: fail if service_group not specified
    fail:
      msg: "service_group not specified...cannot create."
    when: service_group is not defined or service_group == ""

  - name: get service facts
    service_facts:

  - name: Format service name to {{ service_name }}.service for service_facts lookup
    set_fact:
      service_name_index: "{{ service_name }}.service"

  - name: Print debug message
    debug:
      msg: "Service {{ service_name }} will be created or recreated"

  - name: Init the command
    set_fact:
      command_to_exec:
        - "{{ webmethods_install_dir }}/common/bin/daemon.sh"

  - name: append service path
    set_fact:
      command_to_exec: "{{ command_to_exec }} + [ '-f' ] + [ '{{ service_exec_filepath }}' ]"

  - name: append service user
    set_fact:
      command_to_exec: "{{ command_to_exec }} + [ '-u' ] + [ '{{ service_user }}' ]"

  - name: append service group
    set_fact:
      command_to_exec: "{{ command_to_exec }} + [ '-g' ] + [ '{{ service_group }}' ]"

  - name: append service name
    set_fact:
      command_to_exec: "{{ command_to_exec }} + [ '-n' ] + [ '{{ service_name }}' ]"

  - name: append service type
    set_fact:
      command_to_exec: "{{ command_to_exec }} + [ '-T' ] + [ '{{ service_type }}' ]"
    when: service_type is defined and service_type != ""

  - name: append service pid file
    set_fact:
      command_to_exec: "{{ command_to_exec }} + [ '-P' ] + [ '{{ service_pidfile }}' ]"
    when: service_pidfile is defined and service_pidfile != ""

  - name: append service runlevel_kill
    set_fact:
      command_to_exec: "{{ command_to_exec }} + [ '-K' ] + [ '{{ service_runlevel_kill }}' ]"
    when: service_runlevel_kill is defined and service_runlevel_kill != ""

  - name: append service runlevel_start
    set_fact:
      command_to_exec: "{{ command_to_exec }} + [ '-S' ] + [ '{{ service_runlevel_start }}' ]"
    when: service_runlevel_start is defined and service_runlevel_start != ""

  - name: execute command
    command:
      argv: "{{ command_to_exec }}"
      chdir: "{{ webmethods_install_dir }}"
    register: cmd_result
  
  - name: Print the cmd_result to the console.
    debug:
      msg: "{{ cmd_result.stdout_lines | join('\n') }}"

  - name: get service facts
    service_facts:

  - name: fail if service is not found at the end
    fail:
      msg: "service {{ service_name }} is still not found even though we just created it - operation must have failed."
    when: ansible_facts.services[service_name_index] is not defined
  
  ## autostart if specified
  - include_tasks: "command_update.yaml"
    when: service_autostart|default()|bool

  ## call update by default
  - include_tasks: "command_update.yaml"
