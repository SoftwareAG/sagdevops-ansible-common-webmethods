---

  ## get IPs for the cluster
  - import_role: 
      name: get-inventory-hosts
    vars:
      inventory_pattern: "{{ rvar_tc_inventory_pattern }}"
      inventory_action: second_level_lookup
      inventory_hosts_property: ansible_default_ipv4
      inventory_hosts_property_2ndlevel: address

  - name: Set tc_ips facts
    set_fact:
      tc_ips: "{{ output_inventory_hosts }}"

  ## get FQDNs for the cluster
  - import_role: 
      name: get-inventory-hosts
    vars:
      inventory_pattern: "{{ rvar_tc_inventory_pattern }}"
      inventory_action: first_level_lookup
      inventory_hosts_property: "{{ rvar_tc_nodename_inventory_lookup_property | default('ansible_fqdn') }}"

  - name: Set tc_hostnames facts
    set_fact:
      tc_hostnames: "{{ output_inventory_hosts }}"

  - name: Write the config for a X-node terracotta cluster
    template:
      src: "tc-config.template.xml.j2" 
      dest: "{{ _tc_config_file }}"
      backup: yes
      owner: "{{ webmethods_user }}"
      group: "{{ webmethods_group }}"
      mode: 0644

  - name: set params in custom wrapper to match the tcconfig values
    include_tasks: do_set-jvm-params.yml
    vars:
      rvar_jvm_params:
        wrapper.app.parameter.13: "{{ hostvars[inventory_hostname][ rvar_tc_nodename_inventory_lookup_property | default('ansible_fqdn') ] }}"
        wrapper.app.parameter.6: "{{ hostvars[inventory_hostname][ rvar_tc_nodename_inventory_lookup_property | default('ansible_fqdn') ] }}"

  - name: clear facts
    set_fact:
      tc_ips: ""
      tc_hostnames: ""