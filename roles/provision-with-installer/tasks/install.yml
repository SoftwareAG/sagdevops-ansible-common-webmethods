---

- debug: var=rvar_install_products_descriptor verbosity=3

- name: fail if mandatory params not specified
  fail:
    msg: "A mandatory param was not defined, cannot do anything."
  when: item is not defined
  with_items:
    - "{{ rvar_install_products_descriptor.target_install_dir }}"
    - "{{ rvar_install_products_descriptor.installer_path }}"
    - "{{ rvar_install_products_descriptor.script_path }}"
    - "{{ rvar_install_products_descriptor.binaries_image_path }}"

- name: Copy script file to a working runtime copy
  copy:
    src: "{{ rvar_install_products_descriptor.script_path }}"
    dest: "{{ rvar_install_products_descriptor.script_path }}.runtime"
    mode: '0644'
    remote_src: yes

- name: Update the script file with values from the variables
  replace:
    path: "{{ rvar_install_products_descriptor.script_path }}.runtime"
    backup: no
    regexp: "{{ ['{{', item.key , '}}'] | join('[ ]*') }}"
    replace: "{{ item.value }}"
  with_dict:
    __installer_target_path: "{{ rvar_install_products_descriptor.target_install_dir }}"
    __installer_product_image: "{{ rvar_install_products_descriptor.binaries_image_path }}"
    __installer_target_hostname: "{{ ansible_hostname }}"

- name: Update the script file with license values
  replace:
    path: "{{ rvar_install_products_descriptor.script_path }}.runtime"
    backup: no
    regexp: "{{ [ '{{' , (['__installer_product_license.', (item.0 + 1) ] | join('')) , '}}' ] | join('[ ]*') }}"
    replace: "{{ item.1 }}"
  with_indexed_items: "{{ rvar_install_products_descriptor.licenses }}"

- name: Slurp runtime file for debug printing
  slurp:
    src: "{{ rvar_install_products_descriptor.script_path }}.runtime"
  register: runtime_file

- debug: msg="{{ runtime_file['content'] | b64decode }}"

- name: run the install
  include_tasks: "run_installer.yml"
  
- name: Save current hostname in a file for future use (ie. in case of image creation)
  copy:
    dest: "{{ rvar_install_products_descriptor.target_install_dir }}/installed_hostname"
    content: |
      {{ ansible_hostname }}

- name: Save current FQDN in a file for future use (ie. in case of image creation)
  copy:
    dest: "{{ rvar_install_products_descriptor.target_install_dir }}/installed_hostname_fqdn"
    content: |
      {{ ansible_fqdn }}

- name: Clean repo after succesfull install
  file:
    state: absent
    path: "{{ item }}"
  with_items:
    - "{{ rvar_install_products_descriptor.script_path }}"
    - "{{ rvar_install_products_descriptor.script_path }}.runtime"
    - "{{ rvar_install_products_descriptor.binaries_image_path }}"
    - "{{ rvar_install_products_descriptor.installer_path }}"
  when: rvar_install_products_descriptor.clean_after_install | default() | bool