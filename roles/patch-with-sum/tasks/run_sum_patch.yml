---

  - name: Create the command
    set_fact:
      command_to_exec:
        - "{{ rvar_sum_patching_descriptor.sum_home_dir }}/bin/UpdateManagerCMD.sh"
        - "-readScript"
        - "{{ rvar_sum_patching_descriptor.script_path }}.runtime"
        - "-imageFile"
        - "{{ rvar_sum_patching_descriptor.binaries_image_path }}"
        - "-installFromImage"
        - "{{ rvar_sum_patching_descriptor.binaries_image_path }}"

  - name: append image param if defined
    set_fact:
      command_to_exec: "{{ command_to_exec }} + [ '-overInstall' ] + [ '{{ rvar_sum_patching_descriptor.fixes_overinstall | default() | bool | lower }}' ]"
    when: rvar_sum_patching_descriptor.fixes_overinstall is defined

  - name: append image param if defined
    set_fact:
      command_to_exec: "{{ command_to_exec }} + [ '-selfUpdate' ] + [ '{{ rvar_sum_patching_descriptor.sum_selfupdate | default() | bool | lower }}' ]"
    when: rvar_sum_patching_descriptor.sum_selfupdate is defined

  - name: Print the command that we're going to run
    debug:
      msg: "About to run: {{ command_to_exec|join(' ') }}"

  ## TODO --> investigate -- we need to ignore the code=20 which is returned when the fixes are already there
  - name: execute async command
    command:
      argv: "{{ command_to_exec }}"
      chdir: "{{ rvar_sum_patching_descriptor.script_path | dirname }}"
    async: "{{ rvar_install_async_timeout }}"
    poll: "{{ rvar_install_async_poll }}"
    register: cmd_sleeper
  
  - name: Check status for the patching task
    async_status:
      jid: "{{ cmd_sleeper.ansible_job_id }}"
    register: job_result
    until: job_result.finished
    retries: "{{ rvar_install_async_retries }}"
    delay: "{{ rvar_install_async_delay }}"
    
  - debug: var=job_result verbosity=3

  ## TODO --> renable this check?
  # - name: Fail if return code is not 0 or 20
  #   fail:
  #     msg: "The command failed due to unexpected success error_code returned"
  #   when: job_result.rc != 0 and job_result.rc != 20