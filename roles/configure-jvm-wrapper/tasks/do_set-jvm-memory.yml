---

## notes:
# rvar_jvm_mem_min: <full value in MB, suffix g,G,etc. not supported>
# rvar_jvm_mem_max: <full value in MB, suffix g,G,etc. not supported>

  - debug: var=rvar_wrapper_file verbosity=1
  
  - name: fail if mandatory params not specified
    fail: 
      msg: "wrapper file source path is not defined...should be!"
    when: rvar_wrapper_file is not defined
  
  - name: check if wrapper path exists
    stat: 
      path: "{{ rvar_wrapper_file }}"
    register: check_wrapperfile

  - name: fail if wrapper file does not exists
    fail:
      msg: "wrapper file source path does not exist..."
    when: not check_wrapperfile.stat.exists

  - name: "Update config file {{ rvar_wrapper_file }} with rvar_jvm_mem_min param if defined"
    lineinfile:
      state: present
      path: "{{ rvar_wrapper_file }}"
      regexp: "^{{ item.key | replace('.','\\.') }}="
      insertafter: "^#{{ item.key | replace('.','\\.') }}="
      line: "{{ item.key }}={{ item.value }}"
    with_dict:
      "wrapper.java.initmemory": "{{ rvar_jvm_mem_min }}"
    when: rvar_jvm_mem_min is defined and rvar_jvm_mem_min != ""

  - name: "Update config file {{ rvar_wrapper_file }} with rvar_jvm_mem_max param if defined"
    lineinfile:
      path: "{{ rvar_wrapper_file }}"
      regexp: "^{{ item.key | replace('.','\\.') }}="
      insertafter: "^#{{ item.key | replace('.','\\.') }}="
      line: "{{ item.key }}={{ item.value }}"
    with_dict:
      "wrapper.java.maxmemory": "{{ rvar_jvm_mem_max }}"
    when: rvar_jvm_mem_max is defined and rvar_jvm_mem_max != ""